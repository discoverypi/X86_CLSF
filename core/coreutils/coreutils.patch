--- a/lib/freadahead.c	2012-07-04 13:01:43.000000000 +0200
+++ b/lib/freadahead.c	2013-07-26 19:28:03.999985166 +0200
@@ -1,93 +0,0 @@
-/* Retrieve information about a FILE stream.
-   Copyright (C) 2007-2012 Free Software Foundation, Inc.
-
-   This program is free software: you can redistribute it and/or modify
-   it under the terms of the GNU General Public License as published by
-   the Free Software Foundation; either version 3 of the License, or
-   (at your option) any later version.
-
-   This program is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-   GNU General Public License for more details.
-
-   You should have received a copy of the GNU General Public License
-   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
-
-#include <config.h>
-
-/* Specification.  */
-#include "freadahead.h"
-
-#include <stdlib.h>
-#include "stdio-impl.h"
-
-size_t
-freadahead (FILE *fp)
-{
-#if defined _IO_ftrylockfile || __GNU_LIBRARY__ == 1 /* GNU libc, BeOS, Haiku, Linux libc5 */
-  if (fp->_IO_write_ptr > fp->_IO_write_base)
-    return 0;
-  return (fp->_IO_read_end - fp->_IO_read_ptr)
-         + (fp->_flags & _IO_IN_BACKUP ? fp->_IO_save_end - fp->_IO_save_base :
-            0);
-#elif defined __sferror || defined __DragonFly__ /* FreeBSD, NetBSD, OpenBSD, DragonFly, Mac OS X, Cygwin */
-  if ((fp_->_flags & __SWR) != 0 || fp_->_r < 0)
-    return 0;
-# if defined __DragonFly__
-  return __sreadahead (fp);
-# else
-  return fp_->_r
-         + (HASUB (fp) ? fp_->_ur : 0);
-# endif
-#elif defined __EMX__               /* emx+gcc */
-  if ((fp->_flags & _IOWRT) != 0)
-    return 0;
-  /* Note: fp->_ungetc_count > 0 implies fp->_rcount <= 0,
-           fp->_ungetc_count = 0 implies fp->_rcount >= 0.  */
-  /* equivalent to
-     (fp->_ungetc_count == 0 ? fp->_rcount : fp->_ungetc_count - fp->_rcount) */
-  return (fp->_rcount > 0 ? fp->_rcount : fp->_ungetc_count - fp->_rcount);
-#elif defined __minix               /* Minix */
-  if ((fp_->_flags & _IOWRITING) != 0)
-    return 0;
-  return fp_->_count;
-#elif defined _IOERR                /* AIX, HP-UX, IRIX, OSF/1, Solaris, OpenServer, mingw, NonStop Kernel */
-  if ((fp_->_flag & _IOWRT) != 0)
-    return 0;
-  return fp_->_cnt;
-#elif defined __UCLIBC__            /* uClibc */
-# ifdef __STDIO_BUFFERS
-  if (fp->__modeflags & __FLAG_WRITING)
-    return 0;
-  return (fp->__bufread - fp->__bufpos)
-         + (fp->__modeflags & __FLAG_UNGOT ? 1 : 0);
-# else
-  return 0;
-# endif
-#elif defined __QNX__               /* QNX */
-  if ((fp->_Mode & 0x2000 /* _MWRITE */) != 0)
-    return 0;
-  /* fp->_Buf <= fp->_Next <= fp->_Rend,
-     and fp->_Rend may be overridden by fp->_Rsave. */
-  return ((fp->_Rsave ? fp->_Rsave : fp->_Rend) - fp->_Next)
-         + (fp->_Mode & 0x4000 /* _MBYTE */
-            ? (fp->_Back + sizeof (fp->_Back)) - fp->_Rback
-            : 0);
-#elif defined __MINT__              /* Atari FreeMiNT */
-  if (!fp->__mode.__read)
-    return 0;
-  return (fp->__pushed_back
-          ? fp->__get_limit - fp->__pushback_bufp + 1
-          : fp->__get_limit - fp->__bufp);
-#elif defined EPLAN9                /* Plan9 */
-  if (fp->state == 4 /* WR */ || fp->rp >= fp->wp)
-    return 0;
-  return fp->wp - fp->rp;
-#elif defined SLOW_BUT_NO_HACKS     /* users can define this */
-  abort ();
-  return 0;
-#else
- #error "Please port gnulib freadahead.c to your platform! Look at the definition of fflush, fread, ungetc on your system, then report this to bug-gnulib."
-#endif
-}
--- a/lib/fseterr.c	2012-07-04 13:01:43.000000000 +0200
+++ b/lib/fseterr.c	2013-07-26 19:27:55.559985232 +0200
@@ -1,79 +0,0 @@
-/* Set the error indicator of a stream.
-   Copyright (C) 2007-2012 Free Software Foundation, Inc.
-
-   This program is free software: you can redistribute it and/or modify
-   it under the terms of the GNU General Public License as published by
-   the Free Software Foundation; either version 3 of the License, or
-   (at your option) any later version.
-
-   This program is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-   GNU General Public License for more details.
-
-   You should have received a copy of the GNU General Public License
-   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
-
-#include <config.h>
-
-/* Specification.  */
-#include "fseterr.h"
-
-#include <errno.h>
-
-#include "stdio-impl.h"
-
-void
-fseterr (FILE *fp)
-{
-  /* Most systems provide FILE as a struct and the necessary bitmask in
-     <stdio.h>, because they need it for implementing getc() and putc() as
-     fast macros.  */
-#if defined _IO_ftrylockfile || __GNU_LIBRARY__ == 1 /* GNU libc, BeOS, Haiku, Linux libc5 */
-  fp->_flags |= _IO_ERR_SEEN;
-#elif defined __sferror || defined __DragonFly__ /* FreeBSD, NetBSD, OpenBSD, DragonFly, Mac OS X, Cygwin */
-  fp_->_flags |= __SERR;
-#elif defined __EMX__               /* emx+gcc */
-  fp->_flags |= _IOERR;
-#elif defined __minix               /* Minix */
-  fp->_flags |= _IOERR;
-#elif defined _IOERR                /* AIX, HP-UX, IRIX, OSF/1, Solaris, OpenServer, mingw, NonStop Kernel */
-  fp_->_flag |= _IOERR;
-#elif defined __UCLIBC__            /* uClibc */
-  fp->__modeflags |= __FLAG_ERROR;
-#elif defined __QNX__               /* QNX */
-  fp->_Mode |= 0x200 /* _MERR */;
-#elif defined __MINT__              /* Atari FreeMiNT */
-  fp->__error = 1;
-#elif defined EPLAN9                /* Plan9 */
-  if (fp->state != 0 /* CLOSED */)
-    fp->state = 5 /* ERR */;
-#elif 0                             /* unknown  */
-  /* Portable fallback, based on an idea by Rich Felker.
-     Wow! 6 system calls for something that is just a bit operation!
-     Not activated on any system, because there is no way to repair FP when
-     the sequence of system calls fails, and library code should not call
-     abort().  */
-  int saved_errno;
-  int fd;
-  int fd2;
-
-  saved_errno = errno;
-  fflush (fp);
-  fd = fileno (fp);
-  fd2 = dup (fd);
-  if (fd2 >= 0)
-    {
-      close (fd);
-      fputc ('\0', fp); /* This should set the error indicator.  */
-      fflush (fp);      /* Or this.  */
-      if (dup2 (fd2, fd) < 0)
-        /* Whee... we botched the stream and now cannot restore it!  */
-        abort ();
-      close (fd2);
-    }
-  errno = saved_errno;
-#else
- #error "Please port gnulib fseterr.c to your platform! Look at the definitions of ferror and clearerr on your system, then report this to bug-gnulib."
-#endif
-}
--- a/src/dd.c	2012-07-21 16:54:31.000000000 +0200
+++ b/src/dd.c	2013-07-26 19:29:23.869984542 +0200
@@ -1479,7 +1479,7 @@
    The offending behavior has been confirmed with an Exabyte SCSI tape
    drive accessed via /dev/nst0 on both Linux 2.2.17 and 2.4.16 kernels.  */
 
-#ifdef __linux__
+#ifdef UNDEFINED
 
 # include <sys/mtio.h>
 
